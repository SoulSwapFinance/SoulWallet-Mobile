export const en = {
  common: {
    all: 'ALL',
    enterPinToUnlock: 'Enter PIN to unlock',
    createWalletNotification: 'Your wallet name will only be used locally in this application. You can edit it later.',
    privateKey: 'Private key',
    autoLock: 'Auto-lock',
    transferSuccessMessage: 'Your request has been confirmed. You can track its progress on the History page.',
    transferFailMessage1: 'There was a problem with your request. You can track its progress on the History page.',
    transferFailMessage2: 'There was a problem with your request.',
    notify: 'Notification!',
    cannotScanQRCodeWithoutPermission: 'Please grant Camera access to scan QR code',
    goToSetting: 'Go to setting',
    scan: 'Scan',
    toSendFund: 'to send fund',
    toSendAsset: 'to send asset',
    emptyBrowserMessage: 'Type a URL or search the web',
    emptyBrowserTabsMessage: 'Your browsing tabs will appear here',
    copyToClipboard: 'Copy to Clipboard',
    copiedToClipboard: 'Copied to Clipboard',
    continue: 'Continue',
    firstScreenMessagePart1: 'By continuing, you agree to these',
    firstScreenMessagePart2: 'User Service Agreement and Privacy Policy',
    termAndConditions: 'User Agreement',
    and: ' and ',
    privacyPolicy: 'Privacy Policy',
    network: 'Network',
    account: 'Account',
    sendFromAddress: 'Send from address',
    sendToAddress: 'Send to address',
    networkFee: 'Network fee',
    password: 'Password',
    backToHome: 'Back Home',
    resend: 'Resend',
    cancel: 'Cancel',
    pinCode: 'PIN Code',
    newPinCode: 'New PIN Code',
    repeatPinCode: 'Repeat PIN code',
    done: 'Done',
    accountName: 'Account Name',
    accountAddress: 'Account address',
    walletPassword: 'Wallet Password',
    repeatWalletPassword: 'Repeat Password',
    walletName: 'Wallet Name',
    explorer: 'Explorer',
    share: 'Share',
    appLock: 'App lock',
    viewHistory: 'View history',
    finish: 'Finish',
    send: 'Send',
    ok: 'OK',
    reloadBackground: 'Reload background',
    status: 'Status: ',
    url: 'URL: ',
    version: 'Version: ',
    allAccounts: 'Accounts',
    message: 'Message',
    input: 'Input',
    max: 'Max',
    fee: 'Fee:',
    transferable: 'Transferable: ',
    receiveModalText: 'Scan address to receive payment',
    win: 'Win',
    fail: 'Fail',
    active: 'Active',
    locked: 'Locked',
    destroying: 'Destroying',
    search: 'Search',
    searchPlaceholder: 'Search or enter website',
    anErrorHasOccurred: 'An error has occurred.',
    chooseAccount: 'Choose the account(s) you’d like to connect',
    youDonotHaveAnyAcc: (accountType: string) =>
      `You don't have any ${accountType} accounts to connect. Please create a new one`,
    noAvailableAccount: 'No available account',
    connect: 'Connect',
    favorites: 'Favorites',
    history: 'History',
    openInBrowser: 'Open in Browser',
    removeFromFavourites: 'Remove from favourites',
    addBookmark: 'Add Bookmark',
    searchAtDuckDuckGo: 'Search at DuckDuckGo',
    searchResult: 'Search result',
    seeAll: 'See All',
    historyEmptyListPlaceholder: 'Your history will appear here',
    favouritesEmptyListPlaceholder: 'Your favourites will appear here',
    selectAll: 'Select All',
    symbol: 'Symbol',
    decimals: 'Decimals',
    info: 'Info',
    hexData: 'Hex data',
    detail: 'Detail',
    data: 'Data',
    method: 'Method',
    amount: 'Amount',
    rawData: 'Raw data',
    signMethod: 'Sign method',
    from: 'From',
    genesis: 'Genesis',
    versionLabel: 'Version',
    nonce: 'Nonce',
    tip: 'Tip',
    lifetime: 'Lifetime',
    bytes: 'Bytes',
    immortal: 'immortal',
    immortalValidFrom: 'mortal, valid from',
    to: 'to',
    close: 'Close',
    viewDetail: 'View Detail',
    on: 'on',
    block: 'Block this site',
    unblock: 'Unblock this site',
    forgetAll: 'Forget all',
    disconnectAll: 'Disconnect all',
    connectAll: 'Connect all',
    forgetSite: 'Forget site',
    received: 'Received',
    confirm: 'Confirm',
    viewTransaction: 'View transaction',
    address: 'address',
    toImportNFT: 'to import NFT',
    toImportToken: 'to import token',
    toSendNFT: 'to send NFT',
    approveRequestMessage: 'Only approve this request if you trust the app',
    approveTransactionMessage: 'You are approving a request send transaction',
    reject: 'Reject',
    closeAll: 'Close All',
    enterYourPrivateKey: 'Enter or paste private key',
    save: 'Save',
    addToken: 'Add Token',
    importTokenSuccessMessage: 'Your changes are saved successfully',
    manageTokenList: 'TokenList',
    enterYourPassword: 'Enter Password',
    addNftSuccess: 'NFT Collection Added Successfully',
    total: 'Total',
    useDeviceHaveGooglePlayStore: 'Please use a device with Google Play Store installed to continue using this app.',
    pleaseUpdateAndroidSystemWebView: 'Please update Android System Webview to continue using this app.',
    validator: 'Validator',
    collator: 'Collator',
    dApp: 'dApp',
    cancelTask: 'Cancel Task',
    type: ' type',
    transferNotSupportedForNetwork: 'Transfer is not supported for this network.',
    importAlreadyAccount: 'Import Existing Wallet',
    attachAccount: 'Attach Account',
    autoConnectDAppAfterCreating: 'Auto connect dApps after creating',
    scanFromHardwareWallet: 'Scan your address from Hardware Wallet',
    scanFromWallet: 'Scan your address from wallet',
    crowdloanStatus: 'Crowdloan Status',
    parachain: 'Parachain',
    allParachains: 'All Parachains',
    allProjects: 'All Projects',
    polkadotParachain: 'Polkadot Parachain',
    kusamaParachain: 'Kusama Parachain',
    submitting: 'Submitting...',
    processing: 'Processing...',
    sending: 'Sending...',
    scanForApprove: "Use your device's camera to scan the QR code\ndisplayed on your hardware wallet",
    scanQr: 'Scan QR',
    back: 'Back',
    useHardWalletToScan: "Use your hardware wallet's camera\nto scan this QR code",
    useNormalWalletScan: 'Scan this QR code with your wallet',
    scanQrPayload: "Use this device's camera to scan the QR code\ndisplayed on the other wallet",
    startOver: 'Start Over',
    scanSignatureToSignTransaction: 'Scan this QR code with your other wallet\nto sign transaction',
    scanSignatureToSignMessage: 'Scan this QR code with your other wallet\nto sign message',
    viewDetails: 'View Details',
    unsupportedToken: 'Unsupported Token',
    sender: 'Sender',
    recipient: 'Recipient',
    originChain: 'Origin Chain',
    destinationChain: 'Destination Chain',
    viewOnExplorer: 'View on explorer',
    currentPassword: 'Current password',
    selectedValidators: (validators: number) => `Selected (${validators}) validators`,
    specVersion: 'Spec version',
    selectStakingValidator: (validatorLabel: string) => `Select ${validatorLabel}`,
    searchStakingValidator: (validatorLabel: string) => `Search ${validatorLabel}`,
    submit: 'Submit',
    accountConnected: 'account connected',
    year: 'year',
    days: 'days',
    hours: 'hours',
    forgotPassword: 'Forgot password?',
    resetAccount: 'Reset account',
    eraseAll: ' Erase all',
    connecting: 'Connecting...',
    chainConnected: (chain: string) => `${chain} is connected!`,
    enableChain: 'Enable chain?',
    enableChainMessage: (chainName: string) =>
      `Your selected chain (${chainName}) is currently disabled, you need to turn it on`,
    provider: 'Provider',
    pools: 'Pool',
    nominate: 'Nominate',
    evmNetworks: 'EVM networks',
    substrateNetworks: 'Substrate networks',
    networks: 'Networks',
  },
  title: {
    exportAccount: 'Export Account',
    network: 'Network',
    networks: 'Networks',
    chain: 'Chain',
    token: 'Token',
    history: 'History',
    qrScanner: 'QR scanner',
    selectUnit: 'Select Unit',
    filters: 'Filters',
    importNft: 'Import NFT',
    nftList: 'NFT List',
    nftDetail: 'NFT Detail',
    authorizeTransaction: 'Authorize transaction',
    metadataTitlePart1: 'Approving this update will sync your metadata for the',
    metadataTitlePart2: 'chain from',
    authorizeRequestTitle: 'Approve',
    phishingDetected: 'Phishing detected',
    moreOptions: 'More Options',
    scanQrCode: 'Scan QR Code',
    sendTransaction: 'Send transaction',
    staking: 'Staking',
    stakingDetail: 'Staking details',
    stakingNetwork: 'Select Network',
    validators: 'Select Validator',
    chainSelect: 'Chain Select',
    addProvider: 'Add Provider',
    approveRequest: 'Approve Request',
    signTransaction: 'Sign Transaction',
    exportQrSigner: 'Export QR signer',
    scanPayload: 'Scan QR',
    signMessage: 'Sign Message',
    authorizeMessage: 'Authorize Message',
    serviceSelect: 'Select Service',
    login: 'Login',
    slogan: 'Communicate with the other side...',
  },
  tabName: {
    tokens: 'Tokens',
    nfts: 'NFTs',
    crowdloans: 'Crowdloans',
    staking: 'Staking',
    browser: 'Browser',
  },
  welcomeScreen: {
    welcomeBackTitle: 'Welcome back!',
    welcomeMessage: '',
    welcomeBackMessage: 'Enter your password to unlock wallet',
    createAccLabel: 'Create Wallet',
    createAccMessage: 'Generate a new wallet.',
    importAccLabel: 'Import Wallet',
    importAccMessage: 'Import an existing wallet.',
    attachAccLabel: 'Hardware Wallet',
    attachAccMessage: 'Attach your hardware device.',
    forgetAccount: 'Forget account?',
  },
  exportAccount: {
    exportSeedPhrase: 'Export seed phrase',
    exportJsonFile: 'Export JSON file',
    exportPrivateKey: 'Export private key',
    exportQRCode: 'Export QR Code',
    exportJsonFileSuccessfulMessage: 'You have successfully exported JSON file for this account',
    exportSuccessful: 'Export successful',
    yourJsonFile: 'Your json file',
  },
  createAccount: {
    createWithNewSeedPhrase: 'Create with new seed phrase',
    deriveFromAnExistingAcc: 'Derive from an existing account',
    substrate: 'Substrate',
    ethereum: 'Ethereum',
  },
  importAccount: {
    importFromSeedPhrase: 'Seed Phrase',
    importFromSeedPhraseMessage: 'Enter seed phase to import an existing account.',
    importFromJson: 'Polkadot.{js}',
    importByMetaMaskPrivateKey: 'Private Key',
    importByQRCode: 'QR Code',
    selectAccountType: 'Select Account Type',
    substrateAccount: 'Substrate Account',
    ethereumAccount: 'Ethereum Account',
    importJsonInputTitle1: 'Import by JSON file',
    importJsonInputTitle2: 'Click or drag to replace file',
    importJsonSubtitle: 'Drag and drop the JSON file you exported from Polkadot.{js}',
    importJsonMessage: 'Enter the password you used when creating your Polkadot.{js} account.',
    accounts: 'Accounts',
    importPrivateKeyMessage: 'Enter seed phase to import an existing account.',
    importQrCodeMessage1: 'Please ensure that you have granted SoulWallet access to your device’s camera.',
    importQrCodeMessage2: 'Click the “Scan QR” button or read this instruction for more details',
    importAccounts: (number: string) => `Import ${number} accounts`,
  },
  removeAccount: {
    removeAccountTitle: 'Remove this account',
    removeAccountMessage: 'You will no longer be able to access this account via this application',
  },
  attachAccount: {
    connectALedgerDevice: 'Connect Ledger',
    connectAPolkadotVaultAcc: 'Connect Polkadot Vault',
    connectAKeystoneDevice: 'Connect Keystone',
    attachAWatchOnlyAccount: 'Select Watch-Only Wallet',
    connectPolkadotVaultMessage1: 'Open Polkadot Vault on your phone to connect wallet',
    connectPolkadotVaultMessage2:
      'Polkadot Vault will provide you with a QR code to scan. Read this instruction for more details.',
    connectKeystoneMessage1: 'Open “Software Wallet” section on your Keystone and choose SoulWallet',
    connectKeystoneMessage2:
      'Keystone will provide you with a QR code to scan. Read this instruction for more details.',
    scanQrCode: 'Scan QR Code',
    attachWatchOnlyAccMessage: 'Track the activity of any wallet without a private key',
  },
  createPassword: {
    createPasswordMessage: 'Use this password to unlock your account.',
  },
  applyMasterPassword: {
    applyMasterPassword: 'Apply master password',
    applyMasterPasswordMessage:
      'Master password created successfully. Please apply the master password to your existing accounts',
    andOther: 'And other ',
    accounts: ' accounts',
  },
  customization: {
    balance: 'BALANCE',
    showZeroBalance: 'All Balances',
    networks: 'NETWORKS',
  },
  tokenDetail: {
    transferable: 'Transferable',
    locked: 'Locked',
  },
  buyTokens: {
    buyTokensMessage: 'You will be directed to the chosen supplier to complete this transaction',
  },
  sendToken: {
    sendTokenMessage: 'Transfer token with the following details',
    senderAvailableBalance: 'Sender available balance',
  },
  buttonTitles: {
    unlock: 'Unlock',
    unblock: 'Unblock',
    doNotRememberYourPassword: 'Don’t remember your password?',
    createANewAcc: 'Create Account',
    deriveAnAcc: 'Derive an account',
    exportThisAcc: 'Export this account',
    removeThisAcc: 'Remove this account',
    confirm: 'Confirm',
    copyToClipboard: 'Copy to Clipboard',
    finish: 'Finish',
    remove: 'Remove',
    saveItSomeWhereSafe: 'Phrase Stored Safely',
    importAccount: 'Import Account',
    importByJsonFile: 'Import by JSON file',
    scanQrCode: 'Scan QR Code',
    uploadFromPhotos: 'Upload from Photos',
    connectLedgerDevice: 'Connect Ledger',
    attachWatchOnlyAcc: 'Attach Watch-Only Account',
    delete: 'Delete',
    creating: 'Creating',
    continue: 'Continue',
    viewAccOnExplorer: 'View Account on Explorer',
    buyNow: 'Buy Now',
    transfer: 'Transfer',
    transferAll: 'Transfer All',
    cancel: 'Cancel',
    approve: 'Approve',
    send: 'Send',
    import: 'Import',
    next: 'Next',
    applyFilter: 'Apply Filter',
    stake: 'Stake',
    resetSorting: 'Reset Sorting',
    applyValidators: (validator: number) => `Apply ${validator} validators`,
    unstake: 'Unstake',
    stakeMore: 'Stake More',
    applyMasterPassword: 'Apply master password now',
    forgetThisAccount: 'Forget this account',
    seeMore: 'See More',
    withDrawUnstakedFunds: 'Withdraw Unstaked Funds',
    cancelUnstaking: 'Cancel Unstaking',
    claimRewards: 'Claim Rewards',
    save: 'Save',
    backToHome: 'Back Home',
    addNewProvider: 'Add New Provider',
    apply: 'Apply',
    createMasterPassword: 'Create Master Password',
    viewTransaction: 'View Transaction',
    manageTokens: 'Tokens',
    unbond: 'Unbond',
    addContact: 'Add Contact',
    enableNetwork: 'Enable Network',
    newConnection: 'New Connection',
    disconnect: 'Disconnect',
    applyAccounts: (account: number) => `Apply ${account} accounts`,
    createOne: 'Create One',
  },
  inputLabel: {
    selectAcc: 'Select Account',
    selectToken: 'Select Token',
    selectSupplier: 'Select Supplier',
    sendFrom: 'Send from',
    sendTo: 'Send to',
    selectDestinationChain: 'Select destination chain',
    amount: 'Amount',
    estimateFee: 'Estimated fee',
    nftDetails: 'NFT details',
    description: 'Description',
    nftCollectionName: 'NFT collection name',
    ownedBy: 'Owned by',
    createdBy: 'Created by',
    network: 'Network',
    type: 'Type',
    contractAddress: 'Contract Address',
    senderTransferableBalance: 'Sender transferable balance',
    nft: 'NFT',
    estimatedFee: 'Estimated fee',
    selectPool: 'Select pool',
    selectValidator: 'Select validator',
    estimatedEarnings: 'Estimated earnings',
    minimumActive: 'Minimum active',
    unstakingPeriod: 'Unstaking period',
    pool: 'Pool',
    status: 'Status',
    totalBonded: 'Total bonded',
    totalMembers: 'Total members',
    availableBalance: 'Available balance',
    maxValidators: 'Max validators',
    totalNominators: 'Total nominators',
    validator: 'Validator',
    minStakeRequire: 'Min stake required',
    totalStake: 'Total stake',
    ownStake: 'Own stake',
    stakeFromOthers: 'Stake from others',
    estimatedApy: 'Estimated APY',
    commission: 'Commission',
    accountName: 'Account name',
    address: 'Address',
    account: 'Account',
    stakingType: 'Staking type',
    stakingStatus: 'Staking status',
    unclaimedRewards: 'Unclaimed rewards',
    totalStaked: 'Total staked',
    activeStaked: 'Active staked',
    unstaked: 'Unstaked',
    estimatedAnnualEarnings: 'Estimated annual earnings',
    withdrawInXDays: (x: number) => `Withdraw in ${x} days`,
    withdrawInADay: 'Withdraw in a day',
    availableForWithdraw: 'Available for withdraw',
    unstakeFromAcc: 'Unstake from account',
    selectCollator: 'Select Collator',
    collator: 'Collator',
    selectAnUnstakeRequest: 'Select an unstake request',
    cancelUnstakeFee: 'Cancel unstake fee',
    waiting: 'Waiting',
    withdrawalReady: 'Withdrawal ready',
    rewardAmount: 'Reward amount',
    bondRewardAfterClaim: 'Bond reward after claim',
    availableRewards: 'Available rewards',
    tokenType: 'Token type',
    transactionType: 'Transaction type',
    sender: 'Sender',
    recipient: 'Recipient',
    transactionStatus: 'Transaction status',
    extrinsicHash: 'Extrinsic hash',
    transactionTime: 'Transaction time',
    networkFee: 'Network fee',
    originChainFee: 'Origin chain fee',
    fromAccount: 'From account',
    stakingAmount: 'Staking amount',
    unstakeAmount: 'Unstake amount',
    withdrawalAmount: 'Withdraw amount',
    unstakeAmountCancelled: 'Unstake amount cancelled',
    accountAddress: 'Account address',
    currentPassword: 'Current password',
    newPassword: 'New password',
    confirmNewPassword: 'Confirm new password',
    nominationStatus: 'Nomination status',
    pooledStatus: 'Pooled status',
    totalReward: 'Total reward',
    minimumStaked: 'Minimum staked',
    maxNomination: 'Max nomination',
    validators: 'Validators',
    withdrawFromAcc: 'Withdraw from account',
    senderNetwork: 'Sender network',
    destinationNetwork: 'Destination network',
    method: 'Method',
    arguments: 'Arguments',
    chainId: 'Chain id',
    from: 'From',
    to: 'To',
    hexData: 'Hex data',
    methodData: 'Method data',
    dApp: 'DApp',
  },
  placeholder: {
    password: 'Password',
    typeYourSubwalletPassword: 'Type your SoulWallet password',
    accountName: 'Account Name',
    secretPhrase: 'Secret Phrase',
    currentPassword: 'Current Password',
    enterOrPastePrivateKey: 'Enter or paste private key',
    selectNetwork: 'Select Network',
    enterPassword: 'Enter Password',
    confirmPassword: 'Confirm Password',
    selectAccount: 'Select Account',
    selectToken: 'Select Token',
    selectSupplier: 'Select Supplier',
    amount: 'Amount',
    accountAddress: 'Account address',
    senderNetwork: 'Sender network',
    destinationNetwork: 'Destination network',
    estimatedFee: 'Estimated fee',
    searchCollectionName: 'Search collection name',
    searchNftNameOrId: 'Seach NFT name or ID',
    selectNftType: 'Select NFT type',
    enterOrPasteAnAddress: 'Enter or paste an address',
    searchProject: 'Search project',
    searchToken: 'Search token',
    selectPool: 'Select pool',
    searchPool: 'Search pool',
    selectValidator: 'Select validator',
    searchValidator: 'Search validator',
    selectCollator: 'Select Collator',
    unstakingAmount: 'Unstaking amount',
    selectRequest: 'Select request',
    searchNetwork: 'Search network',
    providerUrl: 'Provider URL',
    networkName: 'Network name',
    priceId: 'Price ID',
    networkType: 'Network type',
    blockExplorer: 'Block explorer',
    crowdloanUrl: 'Crowdloan URL',
    selectTokenType: 'Select token type',
    typeOrPasteContractAddress: 'Please type or paste contract address',
    symbol: 'Symbol',
    decimals: 'Decimals',
    selectChain: 'Select Chain',
    searchOrEnterWebsite: 'Search Website',
    searchHistory: 'Search History',
    seedPhrase: 'Seed Phrase',
    enterPrivateKey: 'Enter Private Key',
    searchAddressBook: 'Account Name',
    selectService: 'Select Service',
    searchWebsite: 'Search or enter website',
    connectWalletPlaceholder: 'Please type or paste URI',
  },
  emptyScreen: {
    tokenEmptyTitle: 'No tokens found',
    tokenEmptyMessage: 'Add tokens to get started',
    nftEmptyTitle: 'No NFTs found',
    nftEmptyMessage: 'Click [+] on the top right corner to import your NFT',
    crowdloanEmptyTitle: 'No crowdloan',
    crowdloanEmptyMessage: 'Your crowdloan will appear here!',
    stakingEmptyTitle: 'No staking',
    stakingEmptyMessage: 'Your staking accounts will appear here!',
    historyEmptyTitle: 'No transactions found',
    historyEmptyMessage: 'Your transaction history will appear here!',
    selectorEmptyTitle: 'No results found',
    selectorEmptyMessage: 'Please change your search criteria try again',
    networkSettingsTitle: 'No network found',
    networkSettingsMessage: 'Your network will appear here.',
    browserEmptyTitle: 'Recent search empty list',
    browserEmptyMessage: 'You have not searched any website before',
    manageDAppDetailEmptyTitle: 'No accounts connected',
    manageDAppDetailEmptyMessage: 'Your list of connected accounts will appear here.',
    manageDAppEmptyTitle: 'No dApps found',
    manageDAppEmptyMessage: 'Your list of approved dApps will appear here.',
    categoryItemEmpty: 'This category is empty',
    walletConnectDetailEmptyTitle: 'No Dapp found',
    walletConnectEmptyDetailMessage: 'Your approved dApp will appear here',
  },
  warning: {
    warningAccTitle: 'Warning: Never disclose this key.',
    warningAccMessage: 'Your key enables full-access to your account.',
    warningPasswordTitle: 'Password Requirements',
    warningPasswordMessage: '6 character (min). Uppercase, numbers, and special characters are recommended.',
    warningCreatePasswordTitle: 'Password Requirements',
  },
  message: {
    claimRewardMessage1: 'Your rewards will be bonded back into the pool after claiming',
    claimRewardMessage2: 'Your rewards will be added to your transferable balance after claiming',
    deleteNetworkMessage: 'You are about to delete this network',
    deleteTokenMessage: 'You are about to delete this token',
    deleteNftMessage: 'You are about to delete this NFT collection',
    unBondMessage: (unBondedTime: string) =>
      `Once unbonded, your funds would be available for withdrawal after ${unBondedTime}.`,
    commission: (commission: number) => `Commission: ${commission}%`,
    apy: ' - APY: ',
    selectedXValidator: (length: number) => `Selected ${length} validator`,
    bonded: 'Bonded: ',
    poolId: (id: number) => `Pool #${id}`,
    applyDoneTitle: 'You’re all done!',
    applyDoneMessage: 'You have successfully updated master password to all accounts',
    requestCreateMasterPassword:
      'Your master password is the password that allows access to multiple accounts. Once a master password is confirmed, you will not need to manually type your password with every transaction.',
    transactionDoneMessage: 'Your request has been sent. You can track its progress on the Transaction History page.',
    buyMessage: 'You will be directed to the chosen supplier to complete this transaction',
    changeMasterPasswordMessage1: 'To create a new password, you must correctly enter your current password.',
    changeMasterPasswordMessage2: 'Use this password to unlock your account.',
    forgotPasswordMessage:
      'We do not keep your password. If you forgot your password, you will need to reset your wallet using the Secret Recovery Phrase',
    cannotGetBalance: 'Can not get balance',
    enableTokenOnChain: (tokenNames: string, chainName: string) => `Please enable ${tokenNames} on ${chainName}`,
    disconnectModalMessage:
      'Once you disconnect, you will no longer see this connection on SoulWallet and on your DApp.',
    connectedNetworks: (chainLength: number) => `${chainLength} network(s)`,
    connectedNetworkConnected: (chainLength: number) => `${chainLength} networks connected`,
    connectedAccounts: (accountItemsLength: number) => `${accountItemsLength} account connected`,
    connectWalletConnectMessage: 'By clicking "Connect", you allow this dapp to view your public address',
    connectSuccessfully: 'Connect successfully',
    supportedNetworks: 'Supported networks',
    networkSupported: (networkNumber: number) => `${networkNumber} networks support`,
  },
  filterOptions: {
    polkadotParachain: 'Polkadot parachain',
    kusamaParachain: 'Kusama parachain',
    win: 'Win',
    fail: 'Fail',
    pooled: 'Pooled',
    nominated: 'Nominated',
    evmChains: 'EVM chains',
    substrateChains: 'Substrate chains',
    customChains: 'Custom chains',
    enabledChains: 'Enabled chains',
    disabledChains: 'Disabled chains',
    enabledTokens: 'Enabled tokens',
    disabledTokens: 'Disabled tokens',
    customTokens: 'Custom tokens',
    sendToken: 'Send token',
    receiveToken: 'Receive token',
    nftTransaction: 'NFT transaction',
    stakeTransaction: 'Stake transaction',
    claimStakingReward: 'Claim staking reward',
    successful: 'Successful',
    failed: 'Failed',
    substrateDApp: 'Substrate DApp',
    evmDApp: 'EVM DApp',
    blockedDApp: 'Blocked DApp',
    connectedDApp: 'Connected DApp',
  },
  header: {
    selectAccount: 'Accounts',
    accountDetails: 'Account Details',
    selectCollator: 'Select Collator',
    exportAccount: 'Export Account',
    yourSeedPhrase: 'Account Seed Phrase',
    yourRecoveryPhrase: 'Recovery Phrase',
    yourPrivateKey: 'Private Key',
    successful: 'Successful',
    yourQrCode: 'QR Code',
    confirmation: 'Confirmation',
    createNewAcc: 'Create Account',
    selectAccType: 'Select Account Type',
    importAcc: 'Import Account',
    importFromSeedPhrase: 'Import Seed Phrase',
    importFromJson: 'Import Polkadot.{js}',
    accounts: 'Accounts',
    importByPrivateKey: 'Import Private Key',
    importByQRCode: 'Import QR Code',
    scanQR: 'Scan QR Code',
    attachAnAcc: 'Attach Account',
    connectLedgerDevice: 'Connect Ledger',
    connectPolkadotVault: 'Connect Polkadot Vault',
    connectKeystoneDevice: 'Connect Keystone',
    attachReadOnlyAcc: 'Attach Watch-Only Account',
    removeThisAcc: 'Delete this account?',
    verifySeedPhrase: 'Verify seed phrase',
    createAPassword: 'Create Password',
    customizeAssetDisplay: 'Customize Assets',
    selectToken: 'Select Token',
    yourAddress: 'Address',
    buyToken: 'Buy Token',
    transfer: 'Transfer',
    transferConfirmation: 'Transfer Confirmation',
    yourCollections: 'Collections',
    description: 'Description',
    importNft: 'Import NFT',
    transferNft: 'Transfer NFT',
    nftTransferConfirmation: 'NFT Transfer Confirmation',
    crowdloans: 'Crowdloans',
    filter: 'Filter',
    staking: 'Staking',
    actions: 'Actions',
    addToBond: 'Add to bond',
    networkDetails: 'Network Details',
    selectPool: 'Select Pool',
    poolDetails: 'Pooled Details',
    sorting: 'Sorting',
    selectValidator: 'Select Validator',
    validatorDetails: 'Validator Details',
    addToBondConfirm: 'Add to bond confirm',
    nominationDetails: 'Nomination Details',
    unbond: 'Unbond',
    unbondConfirmation: 'Unbond confirm',
    cancelUnstake: 'Cancel unstake',
    cancelUnstakeConfirmation: 'Cancel unstake confirm',
    withDraw: 'Withdraw',
    withdrawalConfirm: 'Withdrawal confirm',
    claimRewards: 'Claim rewards',
    claimRewardsConfirmation: 'Claim rewards confirm',
    settings: 'Settings',
    generalSettings: 'General',
    notificationType: 'Notification type',
    securitySettings: 'Security',
    changePassword: 'Change Password',
    manageWebsiteAccess: 'Manage website access',
    websiteAccess: 'Website access',
    manageNetworks: 'Manage Networks',
    importNetwork: 'Import Network',
    manageTokens: 'Tokens',
    importToken: 'Import Token',
    tokenDetails: 'Details',
    connectWithSoulwallet: 'Connect with SoulWallet',
    signatureRequired: 'Signature required',
    messageDetails: 'Message details',
    signatureRequest: 'Signature request',
    connectSubwallet: 'Connect SoulWallet',
    connectWebsite: 'Connect website',
    dAppConfiguration: 'Dapp configuration',
    accessConfiguration: 'Access configuration',
    history: 'History',
    sendToken: 'Send token',
    nftTransaction: 'NFT transaction',
    unstakeTransaction: 'Unstake transaction',
    withdrawStake: 'Withdraw stake',
    claimStakingReward: 'Claim staking reward',
    receiveToken: 'Receive token',
    selectNetwork: 'Select Network',
    selectTokenType: 'Select token type',
    confirmTransfer: 'Confirm transfer',
    applyMasterPassword: 'Apply master password',
    unstakeRequest: 'Unstake request',
    addNetworkRequest: 'Add Network Request',
    addTokenRequest: 'Add Token Request',
    transactionRequest: 'Transaction Request',
    updateMetadata: 'Update Metadata',
    switchNetworkRequest: 'Switch Network Request',
    addNewProvider: 'Add new provider',
    deleteNetwork: 'Delete network',
    deleteNft: 'Delete NFT',
    enterPassword: 'Enter Password',
    providers: 'Providers',
    createMasterPassword: 'Create Master Password',
    deleteToken: 'Delete Token',
    language: 'Language',
    manageAddressBook: 'Contacts',
    addressBook: 'Address Book',
    addContact: 'Add Contact',
    editContact: 'Edit Contact',
    search: 'Search',
    websiteAccessConfig: 'Website access config',
    currentPassword: 'Current Password',
    newPassword: 'New Password',
    walletConnect: 'Connect',
    disconnect: 'Disconnect',
    connectedNetworks: 'Connected Networks',
  },
  cryptoScreen: {
    receive: 'Receive',
    send: 'Send',
    swap: 'Swap',
    buy: 'Buy',
  },
  nftScreen: {
    nftDetail: {
      rarity: 'Rarity',
      properties: 'Properties',
      resourcesOrInventory: 'Resources or Inventory',
      contract: 'Contract Address',
      createdBy: 'Created by',
    },
  },
  historyScreen: {
    extrinsicType: {
      transfer: 'Transfer',
      nft: 'NFT',
      crowdloan: 'Crowdloan',
      stake: 'Stake',
      unstake: 'Unstake',
      bond: 'Bond',
      unbond: 'Unbond',
      claimReward: 'Claim reward',
      withdraw: 'Withdraw',
      cancelUnstake: 'Cancel unstake',
      compounding: 'Compounding',
      evmExecute: 'EVM Execute',
    },
    extrinsicStatus: {
      completed: 'Completed',
      failed: 'Failed',
      queued: 'Queued',
      submitting: 'Submitting',
      processing: 'Processing',
      cancelled: 'Cancelled',
      unknown: 'Unknown',
    },
    label: {
      transactionType: 'Transaction type',
      network: 'Network',
      transactionStatus: 'Transaction status',
      extrinsicHash: 'Extrinsic hash',
      transactionTime: 'Transaction time',
      amount: 'Amount',
      collectionName: 'Collection Name',
      stakingType: 'Staking type',
      stakingValue: 'Staking value',
      withdrawValue: 'Withdraw value',
      unstakeValue: 'Unstake value',
      cancelUnstakeValue: 'Cancel unstake value',
      contributeBalance: 'Contribute balance',
      networkFee: 'Network fee',
      originChainFee: 'Origin Chain fee',
      destinationFee: 'Destination fee',
      fromAccount: 'From account',
      transactionFail: ' fail',
    },
    title: {
      transaction: 'Transaction',
      sendTransaction: 'Send token',
      receiveTransaction: 'Receive token',
      nftTransaction: 'NFT transaction',
      crowdloanTransaction: 'Crowdloan transaction',
      stakeTransaction: 'Stake transaction',
      unstakeTransaction: 'Unstake transaction',
      bondTransaction: 'Bond transaction',
      unbondTransaction: 'Unbond transaction',
      claimRewardTransaction: 'Claim Reward transaction',
      withdrawTransaction: 'Withdraw transaction',
      cancelUnstakeTransaction: 'Cancel unstake transaction',
      evmTransaction: 'EVM Transaction',
    },
  },
  importEvmNft: {
    nftType: 'NFT type',
    importNft: 'Import NFT',
  },
  importToken: {
    contractAddress: 'Contract Address',
    tokenName: 'Token name',
  },
  importNetwork: {
    contractAddress: 'Contract Address',
    tokenName: 'Token name',
    providerUrl: 'Provider URL',
    chainName: 'Chain name',
    addressPrefix: 'Address prefix',
    paraId: 'Para Id',
    evmChainId: 'EVM chain id',
    decimal: 'Decimals',
    symbol: 'Symbol',
    priceId: 'Price Id',
    chainType: 'Chain type',
    blockExplorer: 'Block explorer',
    crowdloanUrl: 'Crowdloan URL',
  },
  transferNft: {
    send: 'Send',
  },
  stakingScreen: {
    balanceList: {
      stakingAppearHere: 'Your staking accounts will be appear here',
    },
    selectedCollator: 'Selected collator',
    lowestCommission: 'Lowest commission',
    highestReturn: 'Highest annual return',
    lowestActiveStake: 'Lowest min active stake',
    lowestMember: 'Lowest total member',
    highestBonded: 'Highest total bonded',
    selectedPool: 'Selected pool',
    bonded: 'Bonded',
    selectUnstakeRequest: 'Select unstake request',
    afterInflation: 'after inflation',
    earningReward: 'Earning reward',
    notEarning: 'Not earning',
    maximumSelectableValidators: (maxCount: number) => `You can only choose ${maxCount} validators`,
  },
  addressBook: {
    typeWallet: 'Your Wallet',
    typeContact: 'Saved contacts',
    typeRecent: 'Recent',
    contactName: 'Contact name',
    contactAddress: 'Contact address',
  },
  confirmation: {
    signatureRequest: 'Signature request',
    approveRequest: 'Approve request',
    requestWithAccount: 'You are approving a request with account',
    messageDetail: 'Message details',
    transactionDetail: 'Transaction details',
    lifeTimeContent: 'mortal, valid from {{birth}} to {{death}}',
    addNetworkRequest: 'Add network request',
    addTokenRequest: 'Add token request',
    providerUrl: 'Provider URL',
    chainId: 'Chain ID',
    chainType: 'Chain type',
    blockExplorer: 'Block explorer',
    crowdloanURL: 'Crowdloan URL',
    immortal: 'immortal',
    fromAccount: 'From account',
    toAccount: 'To account',
    toContract: 'To contract',
    tokenType: 'Token type',
    contractAddress: 'Contract Address',
    yourMetadataIsOutOfDate: 'Your metadata is out of date',
    metadataDescription: (chain: string, url: string) =>
      `Approving this update will sync your metadata for ${chain} chain from ${url}`,
    notSpMessagePart1: 'This feature is not available for',
    notSpMessagePart2: 'Please change to another account type',
    deleteContactTitle: 'Delete this contact?',
    deleteContactMessage: 'You would no longer see this address in your address book',
    siteConnected: 'Your following account(s) are connected to this site',
    siteNotConnected: 'Not connected to this site',
    siteNotConnectedMessage:
      'SoulWallet is not connected to this site. Please find and press in the website the "Connect Wallet" button to connect',
    siteBlocked: 'This site has been blocked',
    siteBlockedMessage: 'This site has been previously blocked. Do you wish to unblock and grant access to it?',
  },
  signingAction: {
    basic: 'Basic',
    detail: 'Detail',
    signature: 'Signature',
    message: 'Message',
    to: 'To',
    data: 'Data',
    nonce: 'Nonce',
    value: 'Value',
    gas: 'Gas',
    gasPrice: 'Gas price',
    method: 'Method',
    phase: 'Phase',
    period: 'Period',
    tip: 'Tip',
    era: 'Era',
    approveRequestThisAcc: 'Approve request this account?',
  },
  settings: {
    generalSettings: 'General',
    securitySettings: 'Security',
    manageAddressBook: 'Contacts',
    manageNetworks: 'Networks',
    manageTokens: 'Tokens',
    website: 'Website',
    userGuide: 'Documentation',
    termsOfService: 'User Agreement',
    privacyPolicy: 'Privacy Policy',
    lock: 'Lock',
    tokens: 'Tokens',
    telegram: 'Telegram',
    twitter: 'Twitter',
    discord: 'Discord',
    termOfService: 'User Agreement',
    webViewDebugger: 'Web view debugger',
    immediately: 'Immediately',
    ifLeftFor15Seconds: 'If left for 15 seconds',
    ifLeftFor30Seconds: 'If left for 30 seconds',
    ifLeftFor1Minute: 'If left for 1 minute',
    ifLeftFor5Minutes: 'If left for 5 minutes',
    ifLeftFor15Minutes: 'If left for 15 minutes',
    ifLeftFor30Minutes: 'If left for 30 minutes',
    ifLeftFor1Hour: 'If left for 1 hour',
    whenCloseApp: 'When close app',
    networksAndTokens: 'Networks & tokens',
    communityAndSupport: 'Community & support',
    aboutSoulWallet: 'About SoulWallet',
    pinCode: 'PIN Code',
    faceId: 'Face ID / Touch ID',
    changeYourPinCode: 'Change your PIN code',
    changePassword: 'Change Password',
    manageWebsiteAccess: 'Manage Website Access',
    manageWalletConnectDapp: 'Manage WalletConnect',
    appLock: 'App lock',
    language: 'Language',
    notifications: 'Notifications',
  },
  warningTitle: {
    whatIfLoseRecoveryPhrase: 'Note: your phrase is your responsibility.',
    warning: 'Warning',
    error: 'Error!',
    clearHistory: 'Clear History',
    updateNetwork: 'Update Network',
    expiredConnectionTitle: 'Connection Expired',
    unsupportedNetworkTitle: 'Unsupported Network',
  },
  warningMessage: {
    passwordTooShort: 'Password is too short',
    noNetworkAvailable: 'No network available',
    noServiceAvailable: 'No service available',
    secretPhraseWarning:
      'Warning: only you can recover your account.',
    unableDecode: 'Unable to decode using the supplied passphrase',
    invalidJsonFile: 'Invalid Json file',
    doNotMatchPasswordWarning: 'Passwords do not match',
    isNotSameAddressAndTokenType: 'Transfer is not supported for this type of account and token',
    initSecretPhrase:
      'Keep your phrase in a safe place and never disclose it, unless you are giving over control of your assets.',
    requireMessage: 'Field Required',
    noEvmAccountMessage: "You don't have any evm account. Please create, import or restore an account to continue",
    noSubstrateAccountMessage:
      "You don't have any substrate account. Please create, import or restore an account to continue",
    trustSiteMessage: 'Make sure you trust this site before connecting',
    ethSignWarningMessage:
      "Signing this message can be dangerous. This signature could potentially perform any operation on your account's behalf, including granting complete control of your account and all of its assets to the requesting site. Only sign this message if you know what you're doing or completely trust the requesting site.",
    clearHistoryWarningMessage: 'Make sure you want to clear all history',
    phishingMessage:
      'This site is blocked because the SoulWallet app believes that this website could compromise the security of your accounts and your tokens.',
    balanceTooLow: 'Your balance is too low to cover fees',
    thresholdLagerThan: 'The threshold must be larger than',
    invalidQRCode: 'Invalid QR code',
    readOnly: 'You are using watch-only account',
    noInternetMessage: 'No internet connection. Please try again later',
    webRunnerDeadMessage: "We've run into an issue. Please try again later or restart the application",
    unSupportSigning: 'This feature is not available for the chosen account',
    networkUnSupportQrSigner: 'This network does not support this feature with QR-signer account',
    featureIsNotAvailable: 'This feature is not available for the chosen account',
    tokenExists: 'The token already exists.',
    enableNetworkMessage:
      'The network you selected has not enable. Please enable by click this button or choose other network',
    expiredConnectionMessage: 'Connection expired. Please create a new connection from dApp',
    unsupportedNetworkMessage: 'There is at least 1 chosen network unavailable',
  },
  errorMessage: {
    invalidPinCode: 'Invalid PIN Code',
    wrongPassword: 'Wrong Password',
    invalidMnemonicSeed: 'Invalid Mnemonic Seed',
    invalidAddress: 'Invalid Address',
    scanAgain: "Sorry, we've run into a problem.\nPlease scan again",
    occurredError: 'An error has occurred. Please try again later',
    invalidEvmContractAddress: 'Invalid EVM contract address',
    tokenAlreadyAdded: 'This token has already been added',
    invalidContractForSelectedChain: 'Invalid contract for the selected chain',
    unknownError: 'Encountered an error, please try again.',
    networkHasBeenAlreadyAdded: 'This network has already been added',
    providerHasExisted: 'This provider has existed',
    providerIsNotTheSameNetwork: 'This provider is not the same network',
    unableToConnectToTheProvider: 'Unable to connect to the provider',
    providerRequirePrefix: 'Provider URL requires http/https or wss prefix',
    successfullyAddANewCustomProvider: 'Provider Added Successfully',
    errorConfigureNetwork: 'Error trying to configure network',
    noProviderAvailable: 'No provider available',
    qrCodeNotSupport: 'QR code not supported, please make sure you are scanning a transaction from a supported software.',
    noNetwork: 'SoulWallet does not currently recognize a chain with genesis hash, please add the network first',
    noSenderFound: 'There is no related account in the app',
    externalAccount: 'There is external account',
    framesToBig: 'Frames number is too big, the QR seems not to be a recognized extrinsic raw data',
    networkDisconected: 'is disconnected',
    invalidMasterPassword: 'Invalid Master Password',
    validateProviderError: 'Error validating this provider',
    cannotConnectToThisProvider: 'Cannot connect to this provider',
    thisChainHasAlreadyBeenAdded: 'This chain has already been added',
    invalidProviderUrl: 'Provider URL is not valid',
    recipientAddressIsRequired: 'Recipient address is required',
    invalidRecipientAddress: 'Invalid recipient address',
    sameAddressError: 'The recipient address can not be the same as the sender address',
    notSameAddressTypeError: 'The recipient address must be same type as the current account address',
    recipientAddressMustBeType: (type: string) => `The recipient address must be ${type} type`,
    amountRequiredError: 'Amount is required',
    amountMustBeGreaterThanZero: 'Amount must be greater than 0',
    amountMustBeEqualOrLessThan: (maxString: string) => `Amount must be equal or less than ${maxString}`,
    unbondMustBeEqualOrLessThan: (maxString: string, name?: string) =>
      `${name || 'Value'} must be equal or lesser than ${maxString}`,
    unbondMustBeGreaterThanZero: (name?: string) => `${name || 'Value'} must be greater than 0`,
    unbondMustBeEqual: (maxString: string, name?: string) => `${name || 'Value'} must be equal ${maxString}`,
    unbondInvalidAmount: 'Invalid. If you unstake this amount your staking would fall below minimum stake required',
    crowdloanUrlMustBeAValidUrl: 'Crowdloan URL must be a valid URL',
    blockExplorerMustBeAValidUrl: 'Block explorer must be a valid URL',
    invalidAmount: 'Amount is invalid',
    isNotAnAddress: 'Invalid. The photo does not contain an address',
    isNotContractAddress: 'Invalid. The photo does not contain an contract address',
    contactAddressIsRequired: 'Contact address is required',
    invalidContactAddress: 'Invalid contact address',
    contactNameIsRequired: 'Contact name is required',
    contactNameMustBeUnique: 'Contact name must be unique',
    invalidPassword: 'Invalid password',
    connectionAlreadyExist: 'Connection already exists',
    failToAddConnection: 'Fail to add connection',
    unreadableQrCode: 'Unreadable QR code. Please scan another one.',
  },
  notificationMessage: {
    watchOnlyNoti: 'The account you are using is watch-only, you cannot send assets with it',
    comingSoon: 'Coming soon',
    pleaseTryAgain: 'An error occurred, please try again',
    deleteNftCollectionSuccessfully: 'Deleted NFT collection successfully',
    deleteNftCollectionUnsuccessfully: 'Deleted NFT collection unsuccessfully',
    importedChainSuccessfully: 'Imported chain successfully',
    updatedChainSuccessfully: 'Updated chain successfully',
    deleteChainSuccessfully: 'Deleted chain successfully',
    addProviderSuccessfully: 'Added a provider successfully',
    addTokenSuccessfully: 'Added token successfully',
  },
  browser: {
    searchWithDuckduckgo: 'Search with DuckDuckgo',
    recent: 'Recent',
    favorite: 'Favorites',
    recommended: 'Recommended',
    seeAll: 'See All',
    clearHistory: 'Clear History',
    all: 'ALL',
    defi: 'DEFI',
    nft: 'NFT',
    EVM: 'EVM',
    community: 'DAO',
    utilities: 'TOOLS',
    news: "NEWS",
    crowdloans: 'Crowdloan',
    staking: 'Staking',
    test: 'Test',
    data: 'Data',
  },
};
